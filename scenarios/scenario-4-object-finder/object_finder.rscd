robot ObjectFinder {
    interface laser use LaserScan from sensor_msgs
    interface boxes use BoundingBoxes from darknet_ros_msgs

    datatype object LaserScan {
        ranges: array(double)
    }

    datatype enum DistanceFront from LaserScan to {
        value.ranges[0] >= 0.6 -> safe_front
        default -> unsafe_front
    }

    datatype enum DistanceLeft from LaserScan to {
        value.ranges[90] >= 0.6 -> safe_left
        default -> unsafe_left
    }

    datatype enum DistanceRight from LaserScan to {
        value.ranges[270] >= 0.6 -> safe_right
        default -> unsafe_right
    }

    datatype object BoundingBoxes {
        bounding_boxes: array(BoundingBox)
    }

    datatype object BoundingBox {
        class_id: string
    }

    datatype object ObjectCount {
        count: integer(0..1)
    }

    datatype enum ScannedObject from BoundingBoxes to {
        value.bounding_boxes[0].class_id = "sfront sign" -> sfront_sign
        default -> no_object
    }

    component LidarScanner {
        outgoing message scan_front with identifier: "/scan", type: DistanceFront links laser
        outgoing message scan_left with identifier: "/scan", type: DistanceLeft links laser
        outgoing message scan_right with identifier: "/scan", type: DistanceRight links laser

        behaviour {
            variable front: DistanceFront
            variable left: DistanceLeft
            variable right: DistanceRight
            variable has_front: boolean = false

            initial state sensing {
                on response from scan_front do front := value, has_front := true
                on response from scan_left do left := value
                on response from scan_right do right := value
            }
        }
    }

    component Rotator {
        incoming message rotate_left with identifier: "/rotate_left", type: none
        incoming message rotate_right with identifier: "/rotate_right", type: none
        outgoing message rotate_done with identifier: "/rotate_done", type: none

        behaviour {
            initial state awaiting_command {
                on request to rotate_left goto executing
                on request to rotate_right goto executing
            }

            state executing {
                on response from rotate_done goto awaiting_command
            }
        }
    }
	
    component ObjectDetector {
        outgoing message object_count with identifier: "/darknet_ros/found_object", type: ObjectCount links boxes
        outgoing message object_scan with identifier: "/darknet_ros/bounding_boxes", type: ScannedObject links boxes

        behaviour {
            variable scanned_object_count: integer(0..1)
            variable scanned_object: ScannedObject

            on response from object_count do scanned_object_count := value.count
            on response from object_scan do scanned_object := value

            initial state no_object {
                transition if scanned_object_count > 0 and scanned_object = sfront_sign goto object_found
            }

            state object_found {
                transition if scanned_object_count = 0 goto no_object
            }
        }
    }
	
    component TurtlebotPlatfrom from TurtlebotLibrary import TurtlebotPlatform
    component EmergencyStop from EmergencyStopLibrary import EmergencyStop

    requirement move needs LidarScanner.front = safe_front and Rotator.awaiting_command
    requirement halt needs (LidarScanner.left = unsafe_left and LidarScanner.right = unsafe_right and LidarScanner.front = unsafe_front) or ObjectDetector.object_found

    requirement rotate_left needs LidarScanner.left = safe_left and !ObjectDetector.object_found
    requirement rotate_right needs LidarScanner.right = safe_right and !ObjectDetector.object_found
    
    requirement { rotate_left, rotate_right } needs Rotator.awaiting_command
    requirement { rotate_left, rotate_right } needs LidarScanner.front = unsafe_front and LidarScanner.has_front
    requirement rotate_left needs LidarScanner.left = safe_left
    requirement rotate_right needs LidarScanner.right = safe_right

    requirement move needs EmergencyStop.in_service
    requirement halt needs EmergencyStop.stopped

    requirement ObjectDetector.object_found disables move
	
    provide move with { linear: { x: 0.5 }, angular: { z: 0.0 } }
    provide halt with { linear: { x: 0.0 }, angular: { z: 0.0 }}
}
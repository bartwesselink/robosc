robot PersonFollowing {
    interface laser use LaserScan from sensor_msgs
    interface boxes use BoundingBoxes from bboxes_ex_msgs

    datatype object BoundingBoxes {
        bounding_boxes: array(BoundingBox)
    }

    datatype object BoundingBox {
        xmax: double
        xmin: double
        img_width: double
    }

    datatype object LaserScan {
        ranges: array(double)
    }

    datatype enum Distance from LaserScan to {
        value.ranges[0] > 5.0 and value.ranges[350] > 5.0 and value.ranges[10] > 5.0 -> free
        default -> person
    }

    component Scanner {
        outgoing message scan with identifier: "/scan", type: Distance links laser

        behaviour {
            variable distance: Distance

            initial marked state sensing {
                on response from scan do distance := value
            }
        }
    }

    component YoloxDetection {
        outgoing message bounding_boxes with identifier: "/bounding_boxes", type: BoundingBoxes links boxes

        behaviour {
            variable current_image_size: double = 0.0
            variable current_xmax: double = 0.0
            variable current_xmin: double = 0.0

            on response from bounding_boxes do current_image_size := value.bounding_boxes[0].img_width,
                                                current_xmax := value.bounding_boxes[0].xmax,
                                                current_xmin := value.bounding_boxes[0].xmin
                                            goto detected

            initial state initializing {}
            marked state detected {}
        }
    }

    component EmergencyStop from EmergencyStopLibrary import EmergencyStop
    component TurtlebotPlatform from TurtlebotLibrary import TurtlebotPlatform

    // Base requirements
    requirement halt needs EmergencyStop.stopped or Scanner.distance = person
    requirement move needs EmergencyStop.in_service

    requirement move needs YoloxDetection.detected

    // Data for movement
    provide move with {
        linear: { x: 0.0 },
        angular: { z: ((YoloxDetection.current_image_size / 2) - ((YoloxDetection.current_xmin + YoloxDetection.current_xmax) / 2)) / 1000 }
    } if YoloxDetection.detected and Scanner.distance = person

    provide move with {
        linear: { x: 0.2 },
        angular: { z: ((YoloxDetection.current_image_size / 2) - ((YoloxDetection.current_xmin + YoloxDetection.current_xmax) / 2)) / 1000 }
    } if YoloxDetection.detected and Scanner.distance = free

    provide move with {
        linear: { x: 0.0 },
        angular: { z: 0.3 }
    } if YoloxDetection.initializing

    provide halt with { linear: { x: 0.0 }, angular: { z: 0.0 }}
}

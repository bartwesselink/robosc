robot LineFollowerSupervised {
    interface laser use LaserScan from sensor_msgs
    interface movement use Twist from geometry_msgs

    datatype object Vector3 {
        x: double
        y: double
        z: double
    }

    datatype object Twist {
        linear: Vector3
        angular: Vector3
    }

    component LineDetector {
        outgoing message correction with identifier: "/correction", type: double
        outgoing message no_line with identifier: "/no_line", type: none

        behaviour {
            variable current_correction: double = 0.0

            initial marked state no_line {
                on response from correction goto line_found
            }

            state line_found {
                on response from no_line goto no_line
                on response from correction do current_correction := value
            }
        }
    }

    datatype object LaserScan {
        ranges: array(double)
    }

    datatype enum DistanceSafety from LaserScan to {
        value.ranges[0] > 1.0 and value.ranges[270] > 0.5 and value.ranges[90] > 0.5 and value.ranges[45] > 0.7 and value.ranges[305] > 0.7-> safe
        default -> unsafe
    }

    component LidarSensor {
        outgoing message scan with identifier: "/scan", type: DistanceSafety links laser

        behaviour {
            variable current_distance: DistanceSafety = unsafe

            on response from scan do current_distance := value            

            initial marked state unsafe_distance {
                transition if current_distance = safe goto safe_distance
            }

            state safe_distance {
                transition if current_distance = unsafe goto unsafe_distance
            }
        }
    }

    component SimpleMovement {
        incoming message move with identifier: "/simple_movement", type: Twist links movement
    }

    component EmergencyStop from EmergencyStopLibrary import EmergencyStop

    requirement move needs LineDetector.line_found
    requirement move needs EmergencyStop.in_service
    requirement move needs LidarSensor.safe_distance

    provide move with {
        linear: { x: 0.6 },
        angular: { z: (-LineDetector.current_correction) / 100 }
    }
}
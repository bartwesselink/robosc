/*
 * generated by Xtext 2.26.0
 */
package nl.tue.robotsupervisorycontrollerdsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import nl.tue.robotsupervisorycontrollerdsl.generator.cif.CifGenerator
import javax.inject.Inject
import nl.tue.robotsupervisorycontrollerdsl.robotSupervisoryControllerDSL.Robot
import nl.tue.robotsupervisorycontrollerdsl.generator.ros2.Ros2Generator
import nl.tue.robotsupervisorycontrollerdsl.generator.ros1.Ros1Generator
import nl.tue.robotsupervisorycontrollerdsl.generator.config.ConfigService
import nl.tue.robotsupervisorycontrollerdsl.generator.supervisor.ros2.Ros2SupervisorGenerator
import nl.tue.robotsupervisorycontrollerdsl.generator.common.util.ModelHelper
import nl.tue.robotsupervisorycontrollerdsl.robotSupervisoryControllerDSL.CommunicationType
import nl.tue.robotsupervisorycontrollerdsl.robotSupervisoryControllerDSL.ComponentBehaviour

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class RobotSupervisoryControllerDSLGenerator extends AbstractGenerator {
	@Inject CifGenerator cifGenerator
	@Inject Ros2Generator ros2Generator
	@Inject Ros1Generator ros1Generator
	@Inject Ros2SupervisorGenerator ros2SupervisorGenerator
	@Inject ConfigService configService

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		resource.findInstancesOfRobot.filter[it.shouldGenerateArtifacts].forEach[
			val robotResource = it.eResource
			val config = configService.getConfig(robotResource, fsa)
			
			cifGenerator.generate(it, fsa, config)
			ros2Generator.generate(it, fsa, config)
			ros1Generator.generate(it, fsa, config)
			ros2SupervisorGenerator.generate(it, fsa, config)
		]
	}
	
	private def findInstancesOfRobot(Resource resource) {
		return resource.allContents.toIterable.filter(Robot)
	}
	
	private def shouldGenerateArtifacts(Robot robot) {
		// Only generate artifacts when there is at least one automata or communication type
		return !ModelHelper.findWithinRobot(robot, CommunicationType).empty
			|| !ModelHelper.findWithinRobot(robot, ComponentBehaviour).empty
	}
}

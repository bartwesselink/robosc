grammar nl.tue.robotsupervisorycontrollerdsl.RobotSupervisoryControllerDSL with org.eclipse.xtext.common.Terminals

generate robotSupervisoryControllerDSL 'http://www.tue.nl/robotsupervisorycontrollerdsl/RobotSupervisoryControllerDSL'

/////////////////////////////
// GLOBAL MODELS           //
/////////////////////////////
Base:
	Robot | Library;

Robot:
	'robot' name=ID '{'
	(definitions+=RobotDefinition)*
	'}';

Library:
	'library' name=ID '{'
	(definitions+=LibraryDefinition)*
	'}';

RobotDefinition:
	Component | Requirement | ProvideStatement | ComplexDataType | Interface;

LibraryDefinition:
	Component | ComplexDataType | Interface;

/////////////////////////////
// COMPONENTS              //
/////////////////////////////
Component:
	'component' name=ID type=ComponentType;

ComponentType:
	LocalComponent | ImportedComponent;

ImportedComponent:
	'from' library=[Library] 'import' definition=[LibraryDefinition];

LocalComponent:
	{LocalComponent} '{'
	(definitions+=ComponentDefinition)*
	'}';

ComponentDefinition:
	ComponentBehaviour | CommunicationType;

ComponentBehaviour:
	'behaviour' '{' automaton=Automaton '}';

/////////////////////////////
// COMMUNICATION          //
/////////////////////////////
CommunicationType:
	Message | Action | Service;

MessageFrom:
	{MessageFrom} 'outgoing';

MessageTo:
	{MessageTo} 'incoming';

MessageDirection:
	MessageFrom | MessageTo;

Message:
	(direction=MessageDirection) 'message' name=ID 'with' ('identifier:' identifier=STRING ',')? 'type:' (type=DataType)
	('links' links=[Interface])?;

Action:
	'action' name=ID 'with' ('identifier:' identifier=STRING ',')? 'request:' (requestType=DataType) ',' 'response:'
	(responseType=DataType) ',' 'feedback:' (feedbackType=DataType) ('links' links=[Interface])?;

Service:
	'service' name=ID 'with' ('identifier:' identifier=STRING ',')? 'request:' (requestType=DataType) ',' 'response:'
	(responseType=DataType) ('links' links=[Interface])?;

/////////////////////////////
// VARIABLES               //
/////////////////////////////
Variable:
	name=ID ':' type=DataType ('=' initial=Literal)?;

/////////////////////////////
// AUTOMATA                //
/////////////////////////////
Automaton:
	{Automaton} (definitions+=AutomatonDefinition)*;

AutomatonVariable:
	'variable' variable=Variable;

AutomatonDefinition:
	Transition | State | AutomatonVariable;

RequestResultType:
	{RequestResultType} 'request';

ResponseResultType:
	{ResponseResultType} 'response';

FeedbackResultType:
	{FeedbackResultType} 'feedback';

ErrorResultType:
	{ErrorResultType} 'error';

CancelResultType:
	{CancelResultType} 'cancel';

ResultType:
	ResponseResultType | FeedbackResultType | RequestResultType | ErrorResultType | CancelResultType;

TransitionGuard:
	'if' expression=Expression;

TransitionAssignment:
	'do' assignments+=Assignment (',' assignments+=Assignment)*;

TransitionStateChange:
	'goto' state=[State];

ResultTransition:
	'on' (resultType=ResultType) ('from' | 'to') (communicationType=[CommunicationType])
	(assignment=TransitionAssignment)? (stateChange=TransitionStateChange)?;

TauTransition:
	{TauTransition} 'transition' (guard=TransitionGuard)? (stateChange=TransitionStateChange)?;

Transition:
	ResultTransition | TauTransition;

State:
	{State} (initial?='initial')? (marked?='marked')? 'state' name=ID '{'
	(transitions+=Transition)*
	'}';

/////////////////////////////
// DATA                   //
/////////////////////////////
AccessibleItem:
	ObjectProperty | Component | State | Variable | LiteralValue | EnumValue;

AccessType:
	('[' index=INT ']') | ('.' item=[AccessibleItem]);

Access:
	{Access} (firstItem=[AccessibleItem] | value=LiteralValue) (types+=AccessType)*;

StringDataType:
	{StringDataType} 'string';

IntegerDataType:
	{IntegerDataType} 'integer' ('(' from=LiteralInt '..' to=LiteralInt ')')?;

NoneDataType:
	{NoneDataType} 'none';

BooleanDataType:
	{BooleanDataType} 'boolean';

DoubleDataType:
	{DoubleDataType} 'double';

ArrayDataType:
	{ArrayDataType} 'array' '(' type=DataType ')';

BasicDataType:
	IntegerDataType | StringDataType | NoneDataType | BooleanDataType | DoubleDataType;

ComplexDataTypeReference:
	type=[ComplexDataType];

DataType:
	BasicDataType | ArrayDataType | ComplexDataTypeReference;

LiteralBoolean:
	value=('true' | 'false');

LiteralString:
	{LiteralString} value=STRING;

LiteralValue:
	{LiteralValue} 'value';

LiteralInt:
	{LiteralInt} value=INT;

LiteralDouble hidden(WS):
	{LiteralDouble} one=INT '.' two=INT;

Literal:
	LiteralInt | LiteralString | LiteralBoolean | LiteralDouble | Access;

ComplexDataType:
	'datatype' (ObjectDataType | EnumDataType);

ObjectDataType:
	'object' (name=ID) '{'
	(properties+=ObjectProperty)*
	'}';

ObjectProperty:
	{ObjectProperty}
	(name=ID) ':' (type=DataType);

ObjectPropertyValueContent:
	Expression | ObjectValue;

ObjectPropertyValue:
	property=[ObjectProperty] ':' value=ObjectPropertyValueContent;

ObjectValue:
	{ObjectValue} '{' (properties+=ObjectPropertyValue (',' properties+=ObjectPropertyValue)*)? '}';

EnumDataType:
	'enum' (name=ID) 'from' type=DataType 'to' '{'
	(rules+=EnumRule)*
	'}';

EnumValue:
	{EnumValue} name=ID;

EnumTransformationRule:
	expression=Expression '->' value=EnumValue;

EnumDefaultRule:
	'default' '->' value=EnumValue;

EnumRule:
	EnumTransformationRule | EnumDefaultRule;

/////////////////////////////
// EXPRESSIONS             //
/////////////////////////////
Expression:
	Or;

Or returns Expression:
	And ({Or.left=current} 'or' right=And)*;

And returns Expression:
	Equation ({And.left=current} 'and' right=Equation)*;

Equation returns Expression:
	Inequality ({Equation.left=current} '=' right=Inequality)*;

Inequality returns Expression:
	GreaterThan ({Inequality.left=current} '!=' right=GreaterThan)*;

GreaterThan returns Expression:
	GreaterThanEqual ({GreaterThan.left=current} '>' right=GreaterThanEqual)*;

GreaterThanEqual returns Expression:
	SmallerThan ({GreaterThanEqual.left=current} '>=' right=SmallerThan)*;

SmallerThan returns Expression:
	SmallerThanEqual ({SmallerThan.left=current} '<' right=SmallerThanEqual)*;

SmallerThanEqual returns Expression:
	Implies ({SmallerThanEqual.left=current} '<=' right=Implies)*;

Implies returns Expression:
	Plus ({Implies.left=current} '=>' right=Plus)*;

Plus returns Expression:
	Minus ({Plus.left=current} '+' right=Minus)*;

Minus returns Expression:
	Multiply ({Minus.left=current} '-' right=Multiply)*;

Multiply returns Expression:
	Divide ({Multiply.left=current} '*' right=Divide)*;

Divide returns Expression:
	Negation ({Divide.left=current} '/' right=Negation)*;

Negation returns Expression:
	{Negation}
	'!' value=Negation |
	Negative;

Negative returns Expression:
	{Negative}
	'-' value=Negative |
	Parenthesized;

Parenthesized returns Expression:
	{Parenthesized}
	'(' value=Expression ')' |
	Atom;

Atom returns Expression:
	{Atom}
	value=SimpleAtom;

SimpleAtom:
	Literal;

Assignment returns Expression:
	{Assignment}
	(item=Access) ':=' (value=Expression);

/////////////////////////////
// CONTROLLER              //
/////////////////////////////
CommunicationTypeSet:
	{CommunicationTypeSet} '{' (communicationTypes+=[CommunicationType] (',' communicationTypes+=[CommunicationType])*)?
	'}';

CommunicationTypeSingle:
	{CommunicationTypeSingle} communicationType=[CommunicationType];

CommunicationTypeOrSet:
	CommunicationTypeSet | CommunicationTypeSingle;

Requirement:
	'requirement' ((communicationType=CommunicationTypeOrSet 'needs' needsExpression=Expression)
	|
	(disablesExpression=Expression 'disables' communicationType=CommunicationTypeOrSet));

WithDataValue:
	ObjectValue | Expression;

WithData:
	'with' (data=WithDataValue);

ProvideStatement:
	'provide' communicationType=[CommunicationType] data=WithData ('if' expression=Expression)?;

/////////////////////////////
// Interfaces              //
/////////////////////////////
Interface:
	{Interface} 'interface' name=ID 'use' interfaceName=ID 'from' interfacePackage=ID;
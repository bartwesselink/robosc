dependencies {
	api "org.eclipse.xtext:org.eclipse.xtext:${xtextVersion}"
	api "org.eclipse.xtext:org.eclipse.xtext.xbase:${xtextVersion}"
}

configurations {
	mwe2 {
		extendsFrom compileClasspath
	}
}

dependencies {
	mwe2 'org.eclipse.emf:org.eclipse.emf.mwe2.launch'
	mwe2 "org.eclipse.xtext:org.eclipse.xtext.common.types:${xtextVersion}"
	mwe2 "org.eclipse.xtext:org.eclipse.xtext.xtext.generator:${xtextVersion}"
	mwe2 'org.eclipse.xtext:xtext-antlr-generator'
	mwe2 project(':nl.tue.robotsupervisorycontrollerdsl.mwe2')

	implementation files('./libs/escet-wrapper.jar')
}

task generateXtextLanguage(type: JavaExec) {
	mainClass = 'org.eclipse.emf.mwe2.launch.runtime.Mwe2Launcher'
	classpath = configurations.mwe2
	inputs.file "src/nl/tue/robotsupervisorycontrollerdsl/GenerateRobotSupervisoryControllerDSL.mwe2"
	inputs.file "src/nl/tue/robotsupervisorycontrollerdsl/RobotSupervisoryControllerDSL.xtext"
	outputs.dir "src-gen"
	args += "src/nl/tue/robotsupervisorycontrollerdsl/GenerateRobotSupervisoryControllerDSL.mwe2"
	args += "-p"
	args += "rootPath=/${projectDir}/.."
}

task copyTextMateFile(type: Copy) {
	from "${buildDir}/../../nl.tue.robotsupervisorycontrollerdsl.ide/textmate-gen/rscd.tmLanguage.json"
	into "${buildDir}/../../../extension/syntaxes/"
}

task buildEscet(type: Exec) {
	commandLine './gradlew', 'build'
	workingDir '../escet-wrapper'
}

task copyWrapperJar(type: Copy) {
	from "../escet-wrapper/build/libs/escet-wrapper.jar"
	into "./libs/"

	outputs.file "libs/escet-wrapper.jar"
}

copyWrapperJar.dependsOn buildEscet

build.finalizedBy copyTextMateFile

processResources.dependsOn(generateXtextLanguage)
generateXtext.dependsOn(generateXtextLanguage)
clean.dependsOn(cleanGenerateXtextLanguage)
eclipse.classpath.plusConfigurations += [configurations.mwe2]
//this is an eclipse plugin project
eclipseClasspath.enabled=false
cleanEclipseClasspath.enabled=false

generateXtextLanguage.dependsOn copyWrapperJar
compileJava.dependsOn copyWrapperJar
